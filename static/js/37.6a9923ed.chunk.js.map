{"version":3,"sources":["components/ActionsPanel.js","components/Actions.js"],"names":["Timeline","lazy","ActionsPanel","lastViewedLog","newUpdate","isTimelineMode","setIsTimelineMode","showUpdates","setDate","dates","setNewUpdate","setShowUpdates","Bell","useMemo","onClick","BellOff","TimelineIcon","xmlns","viewBox","width","height","fillRule","d","useSpring","opacity","transform","config","mass","tension","friction","trail","styles","map","element","index","push","animationDelay","handleClick","useCallback","div","className","style","interpolate","o","pointerEvents","format","utcToZonedTime","parse","Date","getTimeFromMilliseconds","t","fallback","Updates","Actions","useState","useLocalStorage","setLastViewedLog","updates","useSWR","fetcher","revalidateOnFocus","data","useEffect","undefined","lastTimestamp","slice","reverse","timestamp","isEqual","prevProps","currProps","memo"],"mappings":"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","file":"static/js/37.6a9923ed.chunk.js","sourcesContent":["import {parse, format} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport {useMemo, useCallback, lazy, Suspense} from 'react';\nimport * as Icon from 'react-feather';\nimport {useSpring, animated} from 'react-spring';\n\nconst Timeline = lazy(() => import('./Timeline'));\n\nconst ActionsPanel = ({\n  lastViewedLog,\n  newUpdate,\n  isTimelineMode,\n  setIsTimelineMode,\n  showUpdates,\n  setDate,\n  dates,\n  setNewUpdate,\n  setShowUpdates,\n}) => {\n  const Bell = useMemo(\n    () => (\n      <Icon.Bell\n        onClick={() => {\n          setShowUpdates(!showUpdates);\n          setNewUpdate(false);\n        }}\n      />\n    ),\n    [setNewUpdate, setShowUpdates, showUpdates]\n  );\n\n  const BellOff = useMemo(\n    () => (\n      <Icon.BellOff\n        onClick={() => {\n          setShowUpdates(!showUpdates);\n        }}\n      />\n    ),\n    [setShowUpdates, showUpdates]\n  );\n\n  const TimelineIcon = useMemo(\n    () => (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"-.2 -.2 17 17\"\n        width=\"16\"\n        height=\"16\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M1.643 3.143L.427 1.927A.25.25 0 000 2.104V5.75c0\n          .138.112.25.25.25h3.646a.25.25 0 00.177-.427L2.715\n          4.215a6.5 6.5 0 11-1.18 4.458.75.75 0 10-1.493.154\n          8.001 8.001 0 101.6-5.684zM7.75 4a.75.75 0\n          01.75.75v2.992l2.028.812a.75.75 0 01-.557\n          1.392l-2.5-1A.75.75 0 017 8.25v-3.5A.75.75\n          0 017.75 4z\"\n        ></path>\n      </svg>\n    ),\n    []\n  );\n\n  const {transform, opacity} = useSpring({\n    opacity: isTimelineMode ? 1 : 0,\n    transform: `perspective(600px) rotateX(${isTimelineMode ? 180 : 0}deg)`,\n    config: {mass: 5, tension: 500, friction: 80},\n  });\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${500 + index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  const getTimeFromMilliseconds = (lastViewedLog) => {\n    return format(\n      utcToZonedTime(parse(lastViewedLog, 'T', new Date()), 'Asia/Kolkata'),\n      'dd MMM, p'\n    );\n  };\n\n  const handleClick = useCallback(() => {\n    setIsTimelineMode(true);\n    if (showUpdates) setShowUpdates(!showUpdates);\n  }, [setIsTimelineMode, setShowUpdates, showUpdates]);\n\n  return (\n    <>\n      <animated.div\n        className=\"actions\"\n        style={{\n          opacity: opacity.interpolate((o) => 1 - o),\n          transform,\n          pointerEvents: isTimelineMode ? 'none' : '',\n        }}\n      >\n        <h5 className=\"fadeInUp\" style={trail[0]}>{`${getTimeFromMilliseconds(\n          lastViewedLog\n        )} IST`}</h5>\n\n        <div className=\"bell-icon fadeInUp\" style={trail[1]}>\n          {!showUpdates ? Bell : BellOff}\n          {newUpdate && <div className=\"indicator\"></div>}\n        </div>\n\n        <div\n          className=\"timeline-icon fadeInUp\"\n          onClick={handleClick}\n          style={trail[2]}\n        >\n          {TimelineIcon}\n        </div>\n      </animated.div>\n\n      <animated.div\n        className=\"actions timeline\"\n        style={{\n          opacity,\n          transform: transform.interpolate((t) => `${t} rotateX(180deg)`),\n          pointerEvents: !isTimelineMode ? 'none' : '',\n        }}\n      >\n        {isTimelineMode && (\n          <Suspense fallback={<div />}>\n            <Timeline {...{setIsTimelineMode, setDate, dates}} />\n          </Suspense>\n        )}\n      </animated.div>\n    </>\n  );\n};\n\nexport default ActionsPanel;\n","import ActionsPanel from './ActionsPanel';\n\nimport {fetcher} from '../utils/commonFunctions';\n\nimport {memo, useState, useEffect, lazy, Suspense} from 'react';\nimport {useLocalStorage} from 'react-use';\nimport useSWR from 'swr';\n\nconst Updates = lazy(() => import('./Updates'));\n\nconst Actions = ({setDate, dates}) => {\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage('lastViewedLog', 0);\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\n\n  const {data: updates} = useSWR(\n    'https://api.covid19india.org/updatelog/log.json',\n    fetcher,\n    {\n      revalidateOnFocus: true,\n    }\n  );\n\n  useEffect(() => {\n    if (updates !== undefined) {\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n\n  return (\n    <>\n      <ActionsPanel\n        {...{\n          lastViewedLog,\n          newUpdate,\n          isTimelineMode,\n          setIsTimelineMode,\n          showUpdates,\n          setDate,\n          dates,\n          setNewUpdate,\n          setShowUpdates,\n        }}\n      />\n\n      {showUpdates && (\n        <Suspense fallback={<div />}>\n          <Updates {...{updates}} />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  return true;\n};\n\nexport default memo(Actions, isEqual);\n"],"sourceRoot":""}