{"version":3,"sources":["hooks/useResizeObserver.js","components/Timeseries.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve","margin","yScaleShrinkFactor","Timeseries","timeseries","dates","endDate","chartType","isUniform","isLog","isMovingAverage","t","useTranslation","refs","useRef","wrapperRef","statistics","useMemo","TIMESERIES_STATISTICS","filter","statistic","getBoundingClientRect","width","height","length","highlightedDate","setHighlightedDate","condenseChart","T","days","differenceInDays","parseIndiaDate","chartRight","Math","max","xScale","scaleTime","clamp","domain","range","yScales","chartBottom","addScaleBuffer","scale","log","pow","uniformScaleMin","min","date","getStatistic","movingAverage","uniformScaleMax","yScaleUniformLinear","scaleLinear","nice","yScaleUniformLog","scaleLog","map","PRIMARY_STATISTICS","includes","scaleMin","scaleMax","STATISTIC_CONFIGS","format","isDiscrete","xAxis","g","attr","call","axisBottom","ticks","numTicksX","xAxis2","yScale","tickValues","tickSize","select","style","yAxis","axisRight","tickFormat","num","formatNumber","tickPadding","mousemove","event","xm","pointer","invert","isNaN","bisectDate","bisector","left","dateLeft","dateRight","mouseout","i","svg","transition","duration","D3_TRANSITION_DURATION","color","selectAll","data","join","enter","append","areaPath","allZero","area","curve","curveMonotoneX","x","y0","y1","remove","update","attrTween","previous","this","interpolatePath","exit","linePath","line","y","on","touches","getStatisticDelta","useCallback","currCount","NAN_STATISTICS","prevDate","findIndex","trail","animationDelay","className","delta","statisticConfig","classnames","capitalize","displayName","formatDate","element","preserveAspectRatio","isEqual","prevProps","currProps","equal","regionHighlighted","stateCode","districtName","memo"],"mappings":"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","file":"static/js/34.31499b17.chunk.js","sourcesContent":["import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import {\n  D3_TRANSITION_DURATION,\n  NAN_STATISTICS,\n  PRIMARY_STATISTICS,\n  STATISTIC_CONFIGS,\n  TIMESERIES_STATISTICS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useResizeObserver';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  getStatistic,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {min, max, bisector} from 'd3-array';\nimport {axisBottom, axisRight} from 'd3-axis';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear, scaleLog} from 'd3-scale';\nimport {select, pointer} from 'd3-selection';\nimport {area, line, curveMonotoneX} from 'd3-shape';\nimport 'd3-transition';\nimport {differenceInDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport {memo, useCallback, useEffect, useRef, useMemo, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\n\n// Chart margins\nconst margin = {top: 15, right: 35, bottom: 25, left: 25};\n// Buffer space along y-axis\nconst yScaleShrinkFactor = 0.7;\nconst numTicksX = (width) => (width < 480 ? 4 : 6);\n\nfunction Timeseries({\n  timeseries,\n  dates,\n  endDate,\n  chartType,\n  isUniform,\n  isLog,\n  isMovingAverage,\n}) {\n  const {t} = useTranslation();\n  const refs = useRef([]);\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const statistics = useMemo(\n    () =>\n      TIMESERIES_STATISTICS.filter(\n        (statistic) => chartType === 'delta' || statistic !== 'tpr'\n      ),\n    [chartType]\n  );\n\n  // Dimensions\n  const {width, height} = dimensions ||\n    wrapperRef.current?.getBoundingClientRect() || {\n      width: margin.left + margin.right,\n      height: margin.bottom + margin.top,\n    };\n\n  const [highlightedDate, setHighlightedDate] = useState(\n    dates[dates.length - 1]\n  );\n  useEffect(() => {\n    setHighlightedDate(dates[dates.length - 1]);\n  }, [dates]);\n\n  const condenseChart = useMemo(() => {\n    const T = dates.length;\n    const days = differenceInDays(\n      parseIndiaDate(dates[T - 1]),\n      parseIndiaDate(dates[0])\n    );\n    // Chart extremes\n    const chartRight = width - margin.right;\n    // Bar widths\n    const axisWidth = Math.max(0, chartRight - margin.left) / (1.25 * days);\n    return axisWidth < 4;\n  }, [width, dates]);\n\n  const xScale = useMemo(() => {\n    const T = dates.length;\n    const chartRight = width - margin.right;\n\n    return scaleTime()\n      .clamp(true)\n      .domain([\n        parseIndiaDate(dates[0] || endDate),\n        parseIndiaDate(dates[T - 1] || endDate),\n      ])\n      .range([margin.left, chartRight]);\n  }, [width, endDate, dates]);\n\n  const yScales = useMemo(() => {\n    const chartBottom = height - margin.bottom;\n\n    const addScaleBuffer = (scale, log = false) => {\n      const domain = scale.domain();\n      if (log) {\n        scale.domain([\n          domain[0],\n          domain[0] * Math.pow(domain[1] / domain[0], 1 / yScaleShrinkFactor),\n        ]);\n      } else {\n        scale.domain([\n          domain[0],\n          domain[0] + (domain[1] - domain[0]) / yScaleShrinkFactor,\n        ]);\n      }\n      return scale;\n    };\n\n    const uniformScaleMin = Math.min(\n      0,\n      min(dates, (date) =>\n        getStatistic(timeseries[date], chartType, 'active', {\n          movingAverage: isMovingAverage,\n        })\n      ) || 0\n    );\n\n    const uniformScaleMax = Math.max(\n      1,\n      max(dates, (date) =>\n        Math.max(\n          getStatistic(timeseries[date], chartType, 'confirmed', {\n            movingAverage: isMovingAverage,\n          }),\n          getStatistic(timeseries[date], chartType, 'recovered', {\n            movingAverage: isMovingAverage,\n          }),\n          getStatistic(timeseries[date], chartType, 'deceased', {\n            movingAverage: isMovingAverage,\n          })\n        )\n      ) || 0\n    );\n\n    const yScaleUniformLinear = addScaleBuffer(\n      scaleLinear()\n        .clamp(true)\n        .domain([uniformScaleMin, uniformScaleMax])\n        .range([chartBottom, margin.top])\n        .nice(4)\n    );\n\n    const yScaleUniformLog = addScaleBuffer(\n      scaleLog()\n        .clamp(true)\n        .domain([Math.max(1, uniformScaleMin), Math.max(10, uniformScaleMax)])\n        .range([chartBottom, margin.top])\n        .nice(4),\n      true\n    );\n\n    return statistics.map((statistic) => {\n      if (\n        isUniform &&\n        chartType === 'total' &&\n        isLog &&\n        PRIMARY_STATISTICS.includes(statistic)\n      )\n        return yScaleUniformLog;\n\n      if (isUniform && PRIMARY_STATISTICS.includes(statistic))\n        return yScaleUniformLinear;\n\n      const scaleMin = Math.min(\n        0,\n        min(dates, (date) =>\n          getStatistic(timeseries[date], chartType, statistic, {\n            movingAverage: isMovingAverage,\n          })\n        ) || 0\n      );\n\n      const scaleMax = Math.max(\n        1,\n        max(dates, (date) =>\n          getStatistic(timeseries[date], chartType, statistic, {\n            movingAverage: isMovingAverage,\n          })\n        ) || 0\n      );\n\n      if (chartType === 'total' && isLog) {\n        return addScaleBuffer(\n          scaleLog()\n            .clamp(true)\n            .domain([Math.max(1, scaleMin), Math.max(10, scaleMax)])\n            .range([chartBottom, margin.top])\n            .nice(4),\n          true\n        );\n      }\n\n      return addScaleBuffer(\n        scaleLinear()\n          .clamp(true)\n          .domain([\n            chartType === 'total' || statistic !== 'active' ? 0 : scaleMin,\n            STATISTIC_CONFIGS[statistic].format === '%'\n              ? Math.min(100, scaleMax)\n              : scaleMax,\n          ])\n          .range([chartBottom, margin.top])\n          .nice(4)\n      );\n    });\n  }, [\n    height,\n    chartType,\n    isUniform,\n    isLog,\n    isMovingAverage,\n    statistics,\n    dates,\n    timeseries,\n  ]);\n\n  useEffect(() => {\n    const T = dates.length;\n    // Chart extremes\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    const isDiscrete = chartType === 'delta' && !isMovingAverage;\n\n    const xAxis = (g) =>\n      g\n        .attr('class', 'x-axis')\n        .call(axisBottom(xScale).ticks(numTicksX(width)));\n\n    const xAxis2 = (g, yScale) => {\n      g.attr('class', 'x-axis2')\n        .call(axisBottom(xScale).tickValues([]).tickSize(0))\n        .select('.domain')\n        .style('transform', `translateY(${yScale(0)}px)`);\n\n      if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);\n      else g.select('.domain').attr('opacity', 0);\n    };\n\n    const yAxis = (g, yScale, format) =>\n      g.attr('class', 'y-axis').call(\n        axisRight(yScale)\n          .ticks(4)\n          .tickFormat((num) => formatNumber(num, format))\n          .tickPadding(4)\n      );\n\n    function mousemove(event) {\n      const xm = pointer(event)[0];\n      const date = xScale.invert(xm);\n      if (!isNaN(date)) {\n        const bisectDate = bisector((date) => parseIndiaDate(date)).left;\n        const index = bisectDate(dates, date, 1);\n        const dateLeft = dates[index - 1];\n        const dateRight = dates[index];\n        setHighlightedDate(\n          date - parseIndiaDate(dateLeft) < parseIndiaDate(dateRight) - date\n            ? dateLeft\n            : dateRight\n        );\n      }\n    }\n\n    function mouseout(event) {\n      setHighlightedDate(dates[T - 1]);\n    }\n\n    /* Begin drawing charts */\n    statistics.forEach((statistic, i) => {\n      const ref = refs.current[i];\n      const svg = select(ref);\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n      const yScale = yScales[i];\n      const color = STATISTIC_CONFIGS[statistic].color;\n      const format =\n        STATISTIC_CONFIGS[statistic].format === '%' ? '%' : 'short';\n\n      /* X axis */\n      svg\n        .select('.x-axis')\n        .style('transform', `translateY(${chartBottom}px)`)\n        .transition(t)\n        .call(xAxis);\n\n      svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n\n      /* Y axis */\n      svg\n        .select('.y-axis')\n        .style('transform', `translateX(${chartRight}px)`)\n        .transition(t)\n        .call(yAxis, yScale, format);\n\n      /* Path dots */\n      svg\n        .selectAll('circle.normal')\n        .data(condenseChart ? [] : dates, (date) => date)\n        .join((enter) =>\n          enter\n            .append('circle')\n            .attr('class', 'normal')\n            .attr('fill', color)\n            .attr('stroke', color)\n            .attr('cx', (date) => xScale(parseIndiaDate(date)))\n            .attr('cy', (date) =>\n              yScale(\n                isDiscrete\n                  ? 0\n                  : getStatistic(timeseries[date], chartType, statistic, {\n                      movingAverage: isMovingAverage,\n                    })\n              )\n            )\n            .attr('r', 2)\n        )\n        .transition(t)\n        .attr('cx', (date) => xScale(parseIndiaDate(date)))\n        .attr('cy', (date) =>\n          yScale(\n            getStatistic(timeseries[date], chartType, statistic, {\n              movingAverage: isMovingAverage,\n            })\n          )\n        );\n\n      const areaPath = (dates, allZero = false) =>\n        area()\n          .curve(curveMonotoneX)\n          .x((date) => xScale(parseIndiaDate(date)))\n          .y0(yScale(0))\n          .y1(\n            allZero\n              ? yScale(0)\n              : (date) =>\n                  yScale(\n                    getStatistic(timeseries[date], chartType, statistic, {\n                      movingAverage: isMovingAverage,\n                    })\n                  )\n          )(dates);\n\n      if (isDiscrete) {\n        /* DAILY TRENDS */\n        svg.selectAll('.trend').remove();\n\n        if (condenseChart) {\n          svg\n            .selectAll('.stem')\n            .transition(t)\n            .attr('y1', yScale(0))\n            .attr('y2', yScale(0))\n            .remove();\n\n          svg\n            .selectAll('.trend-area')\n            .data(T ? [dates] : [])\n            .join(\n              (enter) =>\n                enter\n                  .append('path')\n                  .attr('class', 'trend-area')\n                  .call((enter) =>\n                    enter\n                      .attr('d', (dates) => areaPath(dates, true))\n                      .transition(t)\n                      .attr('d', areaPath)\n                  ),\n              (update) =>\n                update.call((update) =>\n                  update.transition(t).attrTween('d', function (dates) {\n                    const previous = select(this).attr('d');\n                    const current = areaPath(dates);\n                    return interpolatePath(previous, current);\n                  })\n                )\n            );\n        } else {\n          svg\n            .selectAll('.trend-area')\n            .transition(t)\n            .attr('d', (dates) => areaPath(dates, true))\n            .remove();\n\n          svg\n            .selectAll('.stem')\n            .data(dates, (date) => date)\n            .join(\n              (enter) =>\n                enter\n                  .append('line')\n                  .attr('class', 'stem')\n                  .attr('stroke-width', 4)\n                  .attr('x1', (date) => xScale(parseIndiaDate(date)))\n                  .attr('y1', yScale(0))\n                  .attr('x2', (date) => xScale(parseIndiaDate(date)))\n                  .attr('y2', yScale(0)),\n              (update) => update,\n              (exit) =>\n                exit.call((exit) =>\n                  exit\n                    .transition(t)\n                    .attr('x1', (date) => xScale(parseIndiaDate(date)))\n                    .attr('x2', (date) => xScale(parseIndiaDate(date)))\n                    .attr('y2', yScale(0))\n                    .remove()\n                )\n            )\n            .transition(t)\n            .attr('x1', (date) => xScale(parseIndiaDate(date)))\n            .attr('y1', yScale(0))\n            .attr('x2', (date) => xScale(parseIndiaDate(date)))\n            .attr('y2', (date) =>\n              yScale(\n                getStatistic(timeseries[date], chartType, statistic, {\n                  movingAverage: isMovingAverage,\n                })\n              )\n            );\n        }\n      } else {\n        svg\n          .selectAll('.stem')\n          .transition(t)\n          .attr('y1', yScale(0))\n          .attr('y2', yScale(0))\n          .remove();\n\n        svg\n          .selectAll('.trend-area')\n          .transition(t)\n          .attr('d', (dates) => areaPath(dates, true))\n          .remove();\n\n        const linePath = line()\n          .curve(curveMonotoneX)\n          .x((date) => xScale(parseIndiaDate(date)))\n          .y((date) =>\n            yScale(\n              getStatistic(timeseries[date], chartType, statistic, {\n                movingAverage: isMovingAverage,\n              })\n            )\n          );\n\n        svg\n          .selectAll('.trend')\n          .data(T ? [dates] : [])\n          .join(\n            (enter) =>\n              enter\n                .append('path')\n                .attr('class', 'trend')\n                .attr('fill', 'none')\n                .attr('stroke-width', 4)\n                .attr('d', linePath)\n                .call((enter) => enter.transition(t).attr('opacity', 1)),\n            (update) =>\n              update.call((update) =>\n                update\n                  .attr('opacity', 1)\n                  .transition(t)\n                  .attrTween('d', function (date) {\n                    const previous = select(this).attr('d');\n                    const current = linePath(date);\n                    return interpolatePath(previous, current);\n                  })\n              )\n          )\n          .attr('stroke', color + (condenseChart ? '99' : '50'));\n      }\n\n      svg.selectAll('*').attr('pointer-events', 'none');\n      svg\n        .on('mousemove', mousemove)\n        .on('touchmove', (event) => mousemove(event.touches[0]))\n        .on('mouseout touchend', mouseout);\n    });\n  }, [\n    width,\n    height,\n    chartType,\n    isMovingAverage,\n    condenseChart,\n    xScale,\n    yScales,\n    statistics,\n    dates,\n    timeseries,\n  ]);\n\n  useEffect(() => {\n    statistics.forEach((statistic, i) => {\n      const ref = refs.current[i];\n      const svg = select(ref);\n      const color = STATISTIC_CONFIGS[statistic].color;\n      const yScale = yScales[i];\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n      svg\n        .selectAll('circle.condensed')\n        .data(\n          condenseChart && highlightedDate ? [highlightedDate] : [],\n          (date) => date\n        )\n        .join((enter) =>\n          enter\n            .append('circle')\n            .attr('class', 'condensed')\n            .attr('fill', color)\n            .attr('stroke', color)\n            .attr('pointer-events', 'none')\n            .attr('cx', (date) => xScale(parseIndiaDate(date)))\n            .attr('cy', (date) =>\n              yScale(\n                getStatistic(timeseries[date], chartType, statistic, {\n                  movingAverage: isMovingAverage,\n                })\n              )\n            )\n            .attr('r', 4)\n        )\n        .transition(t)\n        .attr('cx', (date) => xScale(parseIndiaDate(date)))\n        .attr('cy', (date) =>\n          yScale(\n            getStatistic(timeseries[date], chartType, statistic, {\n              movingAverage: isMovingAverage,\n            })\n          )\n        );\n\n      if (!condenseChart) {\n        svg\n          .selectAll('circle')\n          .attr('r', (date) => (date === highlightedDate ? 4 : 2));\n      }\n    });\n  }, [\n    chartType,\n    isMovingAverage,\n    condenseChart,\n    highlightedDate,\n    xScale,\n    yScales,\n    statistics,\n    timeseries,\n  ]);\n\n  const getStatisticDelta = useCallback(\n    (statistic) => {\n      if (!highlightedDate) return;\n\n      const currCount = getStatistic(\n        timeseries?.[highlightedDate],\n        chartType,\n        statistic,\n        {movingAverage: isMovingAverage}\n      );\n      if (NAN_STATISTICS.includes(statistic) && currCount === 0) return;\n\n      const prevDate =\n        dates[dates.findIndex((date) => date === highlightedDate) - 1];\n\n      const prevCount = getStatistic(\n        timeseries?.[prevDate],\n        chartType,\n        statistic,\n        {movingAverage: isMovingAverage}\n      );\n      return currCount - prevCount;\n    },\n    [timeseries, dates, highlightedDate, chartType, isMovingAverage]\n  );\n\n  const trail = useMemo(\n    () =>\n      statistics.map((statistic, index) => ({\n        animationDelay: `${index * 250}ms`,\n      })),\n    [statistics]\n  );\n\n  return (\n    <div className=\"Timeseries\">\n      {statistics.map((statistic, index) => {\n        const delta = getStatisticDelta(statistic, index);\n        const statisticConfig = STATISTIC_CONFIGS[statistic];\n        return (\n          <div\n            key={statistic}\n            className={classnames('svg-parent fadeInUp', `is-${statistic}`)}\n            style={trail[index]}\n            ref={index === 0 ? wrapperRef : null}\n          >\n            {highlightedDate && (\n              <div className={classnames('stats', `is-${statistic}`)}>\n                <h5 className=\"title\">\n                  {t(capitalize(statisticConfig.displayName))}\n                </h5>\n                <h5>{formatDate(highlightedDate, 'dd MMMM')}</h5>\n                <div className=\"stats-bottom\">\n                  <h2>\n                    {formatNumber(\n                      getStatistic(\n                        timeseries?.[highlightedDate],\n                        chartType,\n                        statistic,\n                        {movingAverage: isMovingAverage}\n                      ),\n                      statisticConfig.format !== 'short'\n                        ? statisticConfig.format\n                        : 'int',\n                      statistic\n                    )}\n                  </h2>\n                  <h6>{`${delta > 0 ? '+' : ''}${formatNumber(\n                    delta,\n                    statisticConfig.format !== 'short'\n                      ? statisticConfig.format\n                      : 'int',\n                    statistic\n                  )}`}</h6>\n                </div>\n              </div>\n            )}\n            <svg\n              ref={(element) => {\n                refs.current[index] = element;\n              }}\n              preserveAspectRatio=\"xMidYMid meet\"\n            >\n              <g className=\"x-axis\" />\n              <g className=\"x-axis2\" />\n              <g className=\"y-axis\" />\n            </svg>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  } else if (!equal(currProps.isUniform, prevProps.isUniform)) {\n    return false;\n  } else if (!equal(currProps.isLog, prevProps.isLog)) {\n    return false;\n  } else if (!equal(currProps.isMovingAverage, prevProps.isMovingAverage)) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.districtName,\n      prevProps.regionHighlighted.districtName\n    )\n  ) {\n    return false;\n  } else if (!equal(currProps.endDate, prevProps.endDate)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Timeseries, isEqual);\n"],"sourceRoot":""}